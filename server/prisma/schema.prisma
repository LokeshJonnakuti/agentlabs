// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordHashConfig {
    id          String @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt @default(now())

    user        User @relation(fields: [userId], references: [id])
    userId      String @unique

    algorithm   String
    memCost     Int
    keyLength   Int
    salt        String
}

model User {
	id		String   @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt @default(now())

	// As opposed to the user id, this id might be changed if for instance
	// a JWT token is compromised. That way we can invalidate all tokens at once.
	// User deserialization should always use this id.
	lookupId	String	@unique @default(uuid())

	email		String	@unique
	fullName	String
	isVerified  Boolean	@default(false)

	password    String?
	passwordHash String?
	passwordHashConfig PasswordHashConfig?
	hasPassword Boolean @default(false)
}

model AgentConversation {
	id		String   @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt @default(now())
	agentId		String

	tasks		AgentTask[]
}

model AgentTask {
	id		String   @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt @default(now())

	agentConversationId String
	agentConversation AgentConversation @relation(fields: [agentConversationId], references: [id])
	message		AgentTaskMessage[]
}

model AgentTaskMessage {
	id		String   @id @default(uuid())
	createdAt DateTime @default(now())

	agentTaskId String
	agentTask AgentTask @relation(fields: [agentTaskId], references: [id])
	message		String
}
