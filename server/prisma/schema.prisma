// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordHashConfig {
    id          String @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt @default(now())

    user        User @relation(fields: [userId], references: [id])
    userId      String @unique

    algorithm   String
    memCost     Int
    keyLength   Int
    salt        String
}

model User {
	id        String   @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt @default(now())

	email      String  @unique
	fullName   String
	isVerified Boolean @default(false)

	password           String?
	passwordHash       String?
	passwordHashConfig PasswordHashConfig?
	hasPassword        Boolean @default(false)

	organizations 		OrganizationUser[]
	projectCreated	 	Project[]
	agentCreated			Agent[]
}

model Organization {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	name					String

	users					OrganizationUser[]
	projects			Project[]
}

enum OrganizationUserRole {
	USER
	ADMIN
}

model OrganizationUser {
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	organization	Organization @relation(fields: [organizationId], references: [id])
	organizationId	String

	user					User @relation(fields: [userId], references: [id])
	userId				String

	role					OrganizationUserRole @default(ADMIN)

	@@id([organizationId, userId])
}

model Project {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	name					String
	slug					String	@unique

	creator				User @relation(fields: [creatorId], references: [id])
	creatorId			String

	organization		Organization @relation(fields: [organizationId], references: [id])
	organizationId	String

	agents				Agent[]
	members				Member[]
	sdkSecrets		SdkSecret[]
}

model SdkSecret {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	secret				String	@unique
	description		String?

	projectId			String
	project				Project @relation(fields: [projectId], references: [id])
}

model Agent {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	name					String

	creator				User @relation(fields: [creatorId], references: [id])
	creatorId			String

	project				Project @relation(fields: [projectId], references: [id])
	projectId			String
}

model Member {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	firstName			String?
	lastName			String?
	email					String

	project				Project @relation(fields: [projectId], references: [id])
	projectId			String

	identities		MemberIdentity[]
}

enum IdentityProvider {
	EMAIL
	GOOGLE
	GITHUB
	GITLAB
	FACEBOOK
	TWITTER
	APPLE
}

model MemberIdentity {
	id						String   @id @default(uuid())
	createdAt 		DateTime @default(now())
	updatedAt 		DateTime @updatedAt @default(now())

	provider			IdentityProvider

	memberId			String
	member				Member @relation(fields: [memberId], references: [id])

	accessToken		String
	refreshToken	String?
	accessTokenExpiresAt			DateTime?
	refreshTokenExpiresAt			DateTime?
}

model AgentConversation {
	id		String   @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt @default(now())
	agentId		String

	tasks		AgentTask[]
}

model AgentTask {
	id		String   @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt @default(now())

	agentConversationId String
	agentConversation AgentConversation @relation(fields: [agentConversationId], references: [id])
	message		AgentTaskMessage[]
}

model AgentTaskMessage {
	id		String   @id @default(uuid())
	createdAt DateTime @default(now())

	agentTaskId String
	agentTask AgentTask @relation(fields: [agentTaskId], references: [id])
	message		String
}
